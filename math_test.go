package stdx_test

import (
	"github.com/smartwalle/stdx"
	"testing"
)

func TestRound(t *testing.T) {
	var tests = []struct {
		n int
		v float64
		r float64
	}{
		{0, 1.113, 1},
		{0, 1.114, 1},
		{0, 1.115, 1},
		{0, 1.116, 1},

		{0, -1.113, -1},
		{0, -1.114, -1},
		{0, -1.115, -1},
		{0, -1.116, -1},

		{0, 0.113, 0},
		{0, 0.114, 0},
		{0, 0.115, 0},
		{0, 0.116, 0},

		{0, 10.113, 10},
		{0, 10.114, 10},
		{0, 10.115, 10},
		{0, 10.116, 10},

		{0, -10.113, -10},
		{0, -10.114, -10},
		{0, -10.115, -10},
		{0, -10.116, -10},

		{0, -10.4, -10},
		{0, -10.5, -11},
		{0, -10.6, -11},
		{0, -10.9, -11},

		{2, 1.113, 1.11},
		{2, 1.114, 1.11},
		{2, 1.115, 1.12},
		{2, 1.116, 1.12},

		{2, -1.113, -1.11},
		{2, -1.114, -1.11},
		{2, -1.115, -1.12},
		{2, -1.116, -1.12},

		{2, 0.113, 0.11},
		{2, 0.114, 0.11},
		{2, 0.115, 0.12},
		{2, 0.116, 0.12},

		{2, -0.113, -0.11},
		{2, -0.114, -0.11},
		{2, -0.115, -0.12},
		{2, -0.116, -0.12},

		{2, 10.113, 10.11},
		{2, 10.114, 10.11},
		{2, 10.115, 10.12},
		{2, 10.116, 10.12},

		{2, -10.113, -10.11},
		{2, -10.114, -10.11},
		{2, -10.115, -10.12},
		{2, -10.116, -10.12},

		{3, 88.6654, 88.665},
		{3, 88.6656, 88.666},
		{3, 88.333333, 88.333},

		{3, -88.6654, -88.665},
		{3, -88.6656, -88.666},
		{3, -88.333333, -88.333},

		{2, 0.5168, 0.52},
		{2, 1.4119, 1.41},
		{2, -0.5168, -0.52},
		{2, -1.4119, -1.41},

		{2, 9.9999, 10},
		{2, 9.9911, 9.99},
		{2, 9.9951, 10},

		{2, -9.9999, -10},
		{2, -9.9911, -9.99},
		{2, -9.9951, -10},

		{2, 0.11299050889256458, 0.11},
		{3, 0.11299050889256458, 0.113},
		{4, 0.11299050889256458, 0.1130},
		{5, 0.11299050889256458, 0.11299},
		{6, 0.11299050889256458, 0.112991},
		{7, 0.11299050889256458, 0.1129905},
	}

	for _, tt := range tests {
		if actual := stdx.Round(tt.v, tt.n); actual != tt.r {
			t.Errorf("Round(%f, %d), 期望得到:%f, 实际得到:%f", tt.v, tt.n, tt.r, actual)
		}
	}
}

func TestFloor(t *testing.T) {
	var tests = []struct {
		n int
		v float64
		r float64
	}{
		{0, 1.113, 1},
		{0, 1.114, 1},
		{0, 1.115, 1},
		{0, 1.116, 1},

		{0, -1.113, -2},
		{0, -1.114, -2},
		{0, -1.115, -2},
		{0, -1.116, -2},

		{0, 0.113, 0},
		{0, 0.114, 0},
		{0, 0.115, 0},
		{0, 0.116, 0},

		{0, 10.113, 10},
		{0, 10.114, 10},
		{0, 10.115, 10},
		{0, 10.116, 10},

		{0, -10.113, -11},
		{0, -10.114, -11},
		{0, -10.115, -11},
		{0, -10.116, -11},

		{0, -10.4, -11},
		{0, -10.5, -11},
		{0, -10.6, -11},
		{0, -10.9, -11},

		{2, 1.113, 1.11},
		{2, 1.114, 1.11},
		{2, 1.115, 1.11},
		{2, 1.116, 1.11},

		{2, -1.113, -1.12},
		{2, -1.114, -1.12},
		{2, -1.115, -1.12},
		{2, -1.116, -1.12},

		{2, 0.113, 0.11},
		{2, 0.114, 0.11},
		{2, 0.115, 0.11},
		{2, 0.116, 0.11},

		{2, -0.113, -0.12},
		{2, -0.114, -0.12},
		{2, -0.115, -0.12},
		{2, -0.116, -0.12},

		{2, 10.113, 10.11},
		{2, 10.114, 10.11},
		{2, 10.115, 10.11},
		{2, 10.116, 10.11},

		{2, -10.113, -10.12},
		{2, -10.114, -10.12},
		{2, -10.115, -10.12},
		{2, -10.116, -10.12},

		{3, 88.6654, 88.665},
		{3, 88.6656, 88.665},
		{3, 88.333333, 88.333},

		{3, -88.6654, -88.666},
		{3, -88.6656, -88.666},
		{3, -88.333333, -88.334},

		{2, 0.5168, 0.51},
		{2, 1.4119, 1.41},
		{2, -0.5168, -0.52},
		{2, -1.4119, -1.42},

		{2, 9.9999, 9.99},
		{2, 9.9911, 9.99},
		{2, 9.9951, 9.99},

		{2, -9.9999, -10},
		{2, -9.9911, -10},
		{2, -9.9951, -10},

		{2, 0.11299050889256458, 0.11},
		{3, 0.11299050889256458, 0.112},
		{4, 0.11299050889256458, 0.1129},
		{5, 0.11299050889256458, 0.11299},
		{6, 0.11299050889256458, 0.112990},
		{7, 0.11299050889256458, 0.1129905},
	}

	for _, tt := range tests {
		if actual := stdx.Floor(tt.v, tt.n); actual != tt.r {
			t.Errorf("Floor(%f, %d), 期望得到:%f, 实际得到:%f", tt.v, tt.n, tt.r, actual)
		}
	}
}

func TestCeil(t *testing.T) {
	var tests = []struct {
		n int
		v float64
		r float64
	}{
		{0, 1.113, 2},
		{0, 1.114, 2},
		{0, 1.115, 2},
		{0, 1.116, 2},

		{0, -1.113, -1},
		{0, -1.114, -1},
		{0, -1.115, -1},
		{0, -1.116, -1},

		{0, 0.113, 1},
		{0, 0.114, 1},
		{0, 0.115, 1},
		{0, 0.116, 1},

		{0, 10.113, 11},
		{0, 10.114, 11},
		{0, 10.115, 11},
		{0, 10.116, 11},

		{0, -10.113, -10},
		{0, -10.114, -10},
		{0, -10.115, -10},
		{0, -10.116, -10},

		{0, -10.4, -10},
		{0, -10.5, -10},
		{0, -10.6, -10},
		{0, -10.9, -10},

		{2, 1.113, 1.12},
		{2, 1.114, 1.12},
		{2, 1.115, 1.12},
		{2, 1.116, 1.12},

		{2, -1.113, -1.11},
		{2, -1.114, -1.11},
		{2, -1.115, -1.11},
		{2, -1.116, -1.11},

		{2, 0.113, 0.12},
		{2, 0.114, 0.12},
		{2, 0.115, 0.12},
		{2, 0.116, 0.12},

		{2, -0.113, -0.11},
		{2, -0.114, -0.11},
		{2, -0.115, -0.11},
		{2, -0.116, -0.11},

		{2, 10.113, 10.12},
		{2, 10.114, 10.12},
		{2, 10.115, 10.12},
		{2, 10.116, 10.12},

		{2, -10.113, -10.11},
		{2, -10.114, -10.11},
		{2, -10.115, -10.11},
		{2, -10.116, -10.11},

		{3, 88.6654, 88.666},
		{3, 88.6656, 88.666},
		{3, 88.333333, 88.334},

		{3, -88.6654, -88.665},
		{3, -88.6656, -88.665},
		{3, -88.333333, -88.333},

		{2, 0.5168, 0.52},
		{2, 1.4119, 1.42},
		{2, -0.5168, -0.51},
		{2, -1.4119, -1.41},

		{2, 9.9999, 10},
		{2, 9.9911, 10},
		{2, 9.9951, 10},

		{2, -9.9999, -9.99},
		{2, -9.9911, -9.99},
		{2, -9.9951, -9.99},

		{2, 0.11299050889256458, 0.12},
		{3, 0.11299050889256458, 0.113},
		{4, 0.11299050889256458, 0.1130},
		{5, 0.11299050889256458, 0.11299},
		{6, 0.11299050889256458, 0.112991},
		{7, 0.11299050889256458, 0.1129905},
	}

	for _, tt := range tests {
		if actual := stdx.Ceil(tt.v, tt.n); actual != tt.r {
			t.Errorf("Ceil(%f, %d), 期望得到:%f, 实际得到:%f", tt.v, tt.n, tt.r, actual)
		}
	}
}

func TestTrunc(t *testing.T) {
	var tests = []struct {
		n int
		v float64
		r float64
	}{
		{0, 1.113, 1},
		{0, 1.114, 1},
		{0, 1.115, 1},
		{0, 1.116, 1},

		{0, -1.113, -1},
		{0, -1.114, -1},
		{0, -1.115, -1},
		{0, -1.116, -1},

		{0, 0.113, 0},
		{0, 0.114, 0},
		{0, 0.115, 0},
		{0, 0.116, 0},

		{0, 10.113, 10},
		{0, 10.114, 10},
		{0, 10.115, 10},
		{0, 10.116, 10},

		{0, -10.113, -10},
		{0, -10.114, -10},
		{0, -10.115, -10},
		{0, -10.116, -10},

		{0, -10.4, -10},
		{0, -10.5, -10},
		{0, -10.6, -10},
		{0, -10.9, -10},

		{2, 1.113, 1.11},
		{2, 1.114, 1.11},
		{2, 1.115, 1.11},
		{2, 1.116, 1.11},

		{2, -1.113, -1.11},
		{2, -1.114, -1.11},
		{2, -1.115, -1.11},
		{2, -1.116, -1.11},

		{2, 0.113, 0.11},
		{2, 0.114, 0.11},
		{2, 0.115, 0.11},
		{2, 0.116, 0.11},

		{2, -0.113, -0.11},
		{2, -0.114, -0.11},
		{2, -0.115, -0.11},
		{2, -0.116, -0.11},

		{2, 10.113, 10.11},
		{2, 10.114, 10.11},
		{2, 10.115, 10.11},
		{2, 10.116, 10.11},

		{2, -10.113, -10.11},
		{2, -10.114, -10.11},
		{2, -10.115, -10.11},
		{2, -10.116, -10.11},

		{3, 88.6654, 88.665},
		{3, 88.6656, 88.665},
		{3, 88.333333, 88.333},

		{3, -88.6654, -88.665},
		{3, -88.6656, -88.665},
		{3, -88.333333, -88.333},

		{2, 0.5168, 0.51},
		{2, 1.4119, 1.41},
		{2, -0.5168, -0.51},
		{2, -1.4119, -1.41},

		{2, 9.9999, 9.99},
		{2, 9.9911, 9.99},
		{2, 9.9951, 9.99},

		{2, -9.9999, -9.99},
		{2, -9.9911, -9.99},
		{2, -9.9951, -9.99},

		{2, 0.11299050889256458, 0.11},
		{3, 0.11299050889256458, 0.112},
		{4, 0.11299050889256458, 0.1129},
		{5, 0.11299050889256458, 0.11299},
		{6, 0.11299050889256458, 0.112990},
		{7, 0.11299050889256458, 0.1129905},
	}

	for _, tt := range tests {
		if actual := stdx.Trunc(tt.v, tt.n); actual != tt.r {
			t.Errorf("Trunc(%f, %d), 期望得到:%f, 实际得到:%f", tt.v, tt.n, tt.r, actual)
		}
	}
}

func TestCeilAndFloor(t *testing.T) {
	var tests = []struct {
		n  int     // 保留小数位数
		v  float64 // 被除数
		d  float64 // 除数
		cr float64 // 被除数 / 除数 的结果向上取整
		fr float64 // 被除数 - 被除数 / 除数 的结果向下取整
	}{
		{0, 10, 3, 4, 6},
		{3, 10, 3, 3.334, 6.666},
		{2, 7, 3, 2.34, 4.66},
		{2, 8, 7, 1.15, 6.85},
	}

	for _, tt := range tests {
		var v = tt.v / tt.d

		if actual := stdx.Ceil(v, tt.n); actual != tt.cr {
			t.Errorf("Ceil(%f, %d), 期望得到:%f, 实际得到:%f", tt.v/tt.d, tt.n, tt.cr, actual)
		}

		if actual := stdx.Floor(tt.v-v, tt.n); actual != tt.fr {
			t.Errorf("Floor(%f, %d), 期望得到:%f, 实际得到:%f", tt.v-v, tt.n, tt.fr, actual)
		}
	}
}

func TestTrunc2(t *testing.T) {
	var tests = []struct {
		n  int     // 保留小数位数
		v  float64 // 被减数
		d  float64 // 减数
		cr float64 // 减数截取指定位数
		fr float64 // v - cr
	}{
		{2, 1, 0.11299050889256458, 0.11, 0.89},
		{3, 1, 0.11299050889256458, 0.112, 0.888},
		{4, 1, 0.11299050889256458, 0.1129, 0.8871},
		{5, 1, 0.11299050889256458, 0.11299, 0.88701},
		{6, 1, 0.11299050889256458, 0.112990, 0.887010},
	}

	for _, tt := range tests {
		if actual := stdx.Trunc(tt.d, tt.n); actual != tt.cr {
			t.Errorf("Trunc(%f, %d), 期望得到:%f, 实际得到:%f", tt.d, tt.n, tt.cr, actual)
		}

		if actual := tt.v - stdx.Trunc(tt.d, tt.n); actual != tt.fr {
			t.Errorf("%f - Trunc(%f, %d), 期望得到:%f, 实际得到:%f", tt.v, tt.d, tt.n, tt.fr, actual)
		}
	}
}

func TestRound2(t *testing.T) {
	var tests = []struct {
		n  int     // 保留小数位数
		v  float64 // 被减数
		d  float64 // 减数
		cr float64 // 减数截取指定位数
		fr float64 // v - cr
	}{
		{2, 1, 0.11299050889256458, 0.11, 0.89},
		{3, 1, 0.11299050889256458, 0.113, 0.887},
		{4, 1, 0.11299050889256458, 0.1130, 0.8870},
		{5, 1, 0.11299050889256458, 0.11299, 0.88701},
		{6, 1, 0.11299050889256458, 0.112991, 0.887009},
	}

	for _, tt := range tests {
		if actual := stdx.Round(tt.d, tt.n); actual != tt.cr {
			t.Errorf("Round(%f, %d), 期望得到:%f, 实际得到:%f", tt.d, tt.n, tt.cr, actual)
		}
		if actual := tt.v - stdx.Round(tt.d, tt.n); actual != tt.fr {
			t.Errorf("%f - Round(%f, %d), 期望得到:%f, 实际得到:%f", tt.v, tt.d, tt.n, tt.fr, actual)
		}
	}
}
